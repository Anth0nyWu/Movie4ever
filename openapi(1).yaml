openapi: 3.0.1
info:
  title: Movie4Ever
  description: 'This is a movie management server which helps a user regist the movies and add them into his favorite list'
  
  termsOfService: https://tripartie.com
  contact:
    email: zihan@tripartie.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Tripartie
  url: https://tripartie.com
  
servers:
- url: http://localhost:8000

tags:
- name: Movies
  description: Everything about your movies
  externalDocs:
    description: Find out more
    url: https://tripartie.com
- name: Favorites
  description: Creat your favorites and manage your movies in a favorite list.
  
paths:

  /api/movies:
    post:
      tags:
      - Movies
      summary: Add a new movie to the library
      operationId: addMovie
      requestBody:
        description: Movie object that needs to be added to the library. You have to give all the properties of the film
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieIn'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
        200:
          description: New movie added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieOut'
    get:
      tags:
      - Movies
      summary: Finds Movies by multiple filters
      description: Multiple filters (`title`, `year`ï¼Œ`type` and `keyWord`) can be provided in the query, if no property provided, it will find all movies. Use the type `start` to search all the films with a title who contains `keyWord`.
      operationId: findMoviesBy
      parameters:
      - name: title
        in: query
        description: title of film that need to be considered for filter
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: annee
        in: query
        description: published year of film that need to be considered for filter
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: type
        in: query
        description: type of search(use `start` to excute a search by keyword)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: keyWord
        in: query
        description: keyWord exist in the title of films to be found
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieOut'
        400:
          description: Invalid value
          content: {}



  /api/movies/{movieId}:
    get:
      tags:
      - Movies
      summary: Find movie in the library by ID
      description: Returns a single movie with the ID you entered, make sure that the movie exists.
      operationId: getMovieById
      parameters:
      - name: movieId
        in: path
        description: ID of movie that you want to find
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieOut'
        400:
          description: Invalid value
          content: {}
        404:
          description: Movie not found
          content: {}
    delete:
      tags:
      - Movies
      summary: Deletes an existing movie
      operationId: deleteMovie
      parameters:
      - name: movieId
        in: path
        description: Id of movie to delete, make sure that the movie exists
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Delete successfully
        400:
          description: Invalid value
          content: {}
        404:
          description: Movie not found
          content: {}
    put:
      tags:
      - Movies
      summary: Update an existing movie
      operationId: putMovie
      parameters:
      - name: movieId
        in: path
        description: Id of the film to update, make sure that the movie exists
        required: true
        style: simple
        explode: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: New movie object after update, give all the properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieIn'
        required: true
      responses:
        200:
          description: Movie updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieOut'
        400:
          description: Invalid value
          content: {}
        404:
          description: Movie not found
          content: {}
        405:
          description: Validation exception
          content: {}
    patch:
      tags:
      - Movies
      summary: Update a part of an existing movie
      operationId: patchMovie
      parameters:
      - name: movieId
        in: path
        description: Id of the film to update, make sure that the movie exists
        required: true
        style: simple
        explode: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: New movie object after update, all the properties are optional
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieIn'
        required: true
      responses:
        200:
          description: Movie updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieOut'
        400:
          description: Invalid value
          content: {}
        404:
          description: Movie not found
          content: {}
        405:
          description: Validation exception
          content: {}
          
  
  /api/listMovies:
    post:
      tags:
      - Favorites 
      summary: create a favorite list of films
      description: Create a new favorite list in the library
      operationId: creatFavorite
      requestBody:
        description: Movie object that needs to be added to the library, you have to give all properties of the list, and movies should be given by its ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteIn'
        required: true
      responses:
        200:
          description: Favorite list added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteOut'
      

  /api/listMovies/{listMovieId}:
    get:
      tags:
      - Favorites
      summary: Find a favorite list with ID
      operationId: getFavorite
      parameters:
      - name: listMovieId
        in: path
        description: ID of favorite list to find, make sure that the list exists
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteOut'
        400:
          description: Invalid value
          content: {}    
    delete:
      tags:
      - Favorites
      summary: Delete a favorite list with ID
      operationId: deleteList
      parameters:
      - name: listMovieId
        in: path
        description: ID of favorite list to delete, make sure that the list exists
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: List deleted successfully
        400:
          description: Invalid value
          content: {}
        404:
          description: List not found
          content: {}
    put: 
      tags:
        - Favorites
      summary: Update a favorite list with ID
      operationId: putList
      parameters:
      - name: listMovieId
        in: path
        description: ID of favorite list to update, make sure that the list exists
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: New movie object after update, you have to give all properties of the list, and movies should be given by its ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteIn'
        required: true
      responses:
        200:
          description: Favorite list updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteOut'
        400:
          description: Invalid value
          content: {}
        404:
          description: List not found
          content: {}
        405:
          description: Validation exception
          content: {}
    patch:
      tags:
        - Favorites
      summary: Update part of a favorite list with ID
      operationId: patchList
      parameters:
      - name: listMovieId
        in: path
        description: ID of favorite list to update, make sure that the list exists
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: New movie object that needs to replace the old one, you have to give all properties of the list, and movies should be given by its ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteIn'
        required: true
      responses:
        200:
          description: Favorite list updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteOut'
        400:
          description: Invalid value
          content: {}
        404:
          description: List not found
          content: {}
        405:
          description: Validation exception
      

  /api/listMovies/{listMovieId}/add:
    put:
      tags:
        - Favorites
      summary: Add one film or many films to the favorite list with ID
      operationId: addToList
      parameters:
      - name: listMovieId
        in: path
        description: ID of favorite list to change, make sure that the list exists
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Movies'ID to be added, only give a list if IDs
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListId'
        required: true
      responses:
        200:
          description: Movie added to my favorite successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteOut'
        400:
          description: Invalid value
          content: {}
        404:
          description: List not found
          content: {}
        405:
          description: Validation exception
          content: {}
    

  /api/listMovies/{listMovieId}/del:
    put:
      tags:
        - Favorites
      summary: Delete one film or many films from the favorite list with ID
      operationId: delFromList
      parameters:
      - name: listMovieId
        in: path
        description: ID of favorite list to change, make sure that the list exists
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Movies'ID prepared to be deleted, only give a list if IDs
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListId'
        required: true
      responses:
        200:
          description: Movie deleted from my favorite successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteOut'
        400:
          description: Invalid value
          content: {}
        404:
          description: List not found
          content: {}
        405:
          description: Validation exception
          content: {}


components:
  schemas:

    ListId:
      type: array
      items:
        type: integer
        format: int64
      example: [1,2,3]

    MovieIn:
      type: object
      properties:
        title:
          type: string
          maxLength: 30
          example: MyFilm
        synopsis:
          type: string
          maxLength: 300
          example: this is my film
        annee:
          type: integer
          format: int64
          example: 1900
    
    MovieOut:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          maxLength: 30
          example: MyFilm
        synopsis:
          type: string
          maxLength: 300
          example: this is my film
        annee:
          type: integer
          format: int64
          example: 1900
          
    FavoriteIn:
      type: object
      properties:
        name:
          type: string
          maxLength: 30
          example: MyList
        description:
          type: string
          maxLength: 300
          example: this is my favorite list
        listOfFilm:
          type: array
          items:
            type: integer
            format: int64
          example: [1,2,3]
    
    FavoriteOut:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          maxLength: 30
          example: MyList
        description:
          type: string
          maxLength: 300
          example: this is my favorite list
        listOfFilm: 
          type: array
          items: 
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 1
                title:
                  type: string
                  maxLength: 30
                  example: MyFilm
                synopsis:
                  type: string
                  maxLength: 300
                  example: this is my film
                annee:
                  type: integer
                  format: int64
                  example: 1900
            
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
